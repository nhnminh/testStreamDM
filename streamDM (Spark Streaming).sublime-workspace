{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Learn",
				"LearningNodeNBAdaptive"
			],
			[
				"LearningNo",
				"LearningNodeNB"
			],
			[
				"add",
				"addonWeight"
			],
			[
				"block",
				"blockAddonWeight"
			],
			[
				"cu",
				"cumulativeAccuracy"
			],
			[
				"num",
				"numInstancesSeen"
			],
			[
				"spark",
				"sparkContext"
			],
			[
				"true",
				"truePrediction"
			],
			[
				"count",
				"countClassDistribution"
			],
			[
				"coun",
				"countClassDistribution"
			],
			[
				"HoeffdingTree",
				"HoeffdingTreeModel"
			],
			[
				"Split",
				"SplitNode"
			],
			[
				"distr",
				"distributionFromSplit"
			],
			[
				"array",
				"arraytoString"
			],
			[
				"try",
				"trySplit"
			],
			[
				"best",
				"bestSuggestions"
			],
			[
				"arra",
				"arraytoString"
			],
			[
				"class",
				"classDistribution"
			],
			[
				"M",
				"MajorityClass"
			],
			[
				"learning",
				"learningNodeType"
			],
			[
				"counter",
				"counterall"
			],
			[
				"show",
				"showConfusionMatrixOption"
			],
			[
				"c",
				"c	shortcut - class"
			],
			[
				"val",
				"valueOfClass"
			],
			[
				"Confu",
				"ConfusionMatrix"
			],
			[
				"example",
				"exampleSpecification"
			],
			[
				"getExa",
				"getExampleSpecification"
			],
			[
				"foreach",
				"foreachRDD"
			],
			[
				"inac",
				"inactiveNodeCount"
			],
			[
				"ac",
				"activeNodeCount"
			],
			[
				"dec",
				"decisionNodeCount"
			],
			[
				"growth",
				"growthAllowed"
			],
			[
				"ist",
				"isInstanceOf"
			],
			[
				"active",
				"activeNode"
			],
			[
				"bes",
				"bestSuggestions"
			],
			[
				"Hoeff",
				"HoeffdingTreeModel"
			],
			[
				"get",
				"getExamples"
			],
			[
				"chun",
				"chunkSizeOption"
			],
			[
				"instanceLimit",
				"instanceLimitOption"
			],
			[
				"number",
				"numberFeatures"
			],
			[
				"numFeature",
				"numFeaturesOption"
			],
			[
				"input",
				"inputFeatures"
			],
			[
				"padding",
				"padding-left"
			],
			[
				"pointArray",
				"pointArrayHCR"
			],
			[
				"Heatmap",
				"HeatmapLayer"
			],
			[
				"point",
				"pointArray"
			],
			[
				"backg",
				"background"
			],
			[
				"bord",
				"border-bottom"
			],
			[
				"margi",
				"margin-right"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"list-sty",
				"list-style-type"
			],
			[
				"list",
				"list-style-type"
			],
			[
				"lis",
				"list-style-type"
			],
			[
				"background",
				"background-position"
			],
			[
				"back",
				"background"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main/scala/org/apache/spark/streamdm/streamDMJob.scala",
			"settings":
			{
				"buffer_size": 1921,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/evaluation/BasicClassificationEvaluator.scala",
			"settings":
			{
				"buffer_size": 8465,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/tasks/EvaluatePrequential.scala",
			"settings":
			{
				"buffer_size": 7098,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/HoeffdingTree.scala",
			"settings":
			{
				"buffer_size": 30867,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/FeatureClassObserver.scala",
			"settings":
			{
				"buffer_size": 18793,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/Node.scala",
			"settings":
			{
				"buffer_size": 22575,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main/scala/org/apache/spark/streamdm/streams/FileReader.scala",
			"settings":
			{
				"buffer_size": 7202,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/run/run.sh",
			"settings":
			{
				"buffer_size": 5054,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/result/majcl4_t.log",
			"settings":
			{
				"buffer_size": 173102,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/result/hdt_1000_MC_cov_splitAll.res",
			"settings":
			{
				"buffer_size": 2004,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n * Copyright (C) 2015 Holmes Team at HUAWEI Noah's Ark Lab.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.spark.streamdm.streams\n\nimport java.io.File\nimport scala.io.Source\nimport scala.collection.mutable.ArrayBuffer\nimport scala.util.Random\n\nimport org.apache.spark.Logging\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.streaming.dstream.{ DStream, InputDStream }\nimport org.apache.spark.streaming.{ Time, Duration, StreamingContext }\n\nimport com.github.javacliparser.{ IntOption, FloatOption, StringOption, FileOption }\n\nimport org.apache.spark.streamdm.core._\nimport org.apache.spark.streamdm.core.specification._\nimport org.apache.spark.streamdm.streams.generators.Generator\n\n/**\n  * FileReader is used to read data from one file of full data to simulate a stream data.\n  *\n  * <p>It uses the following options:\n  * <ul>\n  *  <li> Chunk size (<b>-k</b>)\n  *  <li> Slide duration in milliseconds (<b>-d</b>)\n  *  <li> Type of the instance to use, it should be \"dense\" or \"sparse\" (<b>-t</b>)\n  *  <li> Data File Name (<b>-f</b>)\n  *  <li> Data Header Format,uses weka's arff as default.(<b>-h</b>)\n  * </ul>\n  */\n\nclass FileReader extends StreamReader with Logging {\n\n  val chunkSizeOption: IntOption = new IntOption(\"chunkSize\", 'k',\n    \"Chunk Size\", 10000, 1, Integer.MAX_VALUE)\n\n  val slideDurationOption: IntOption = new IntOption(\"slideDuration\", 'd',\n    \"Slide Duration in milliseconds\", 100, 1, Integer.MAX_VALUE)\n\n  val instanceOption: StringOption = new StringOption(\"instanceType\", 't',\n    \"Type of the instance to use\", \"dense\")\n\n  val instanceLimitOption: IntOption = new IntOption(\"instanceLimit\", 'i',\n    \"Limit of number of instance\", 100000,1, Integer.MAX_VALUE)\n\n  val fileNameOption: StringOption = new StringOption(\"fileName\", 'f',\n    \"File Name\", \"../data/hyperplanesampledata\")\n\n  val dataHeadTypeOption: StringOption = new StringOption(\"dataHeadType\", 'h',\n    \"Data Head Format\", \"arff\")\n\n  val headParser = new SpecificationParser\n  var fileName: String = null\n  var headFileName: String = null\n  var isInited: Boolean = false\n  var hasHeadFile: Boolean = false\n  var lines: Iterator[String] = null\n  var spec: ExampleSpecification = null\n  var counter: Int = 0\n\n  def init() {\n    if (!isInited) {\n      fileName = fileNameOption.getValue\n      val file = new File(fileName)\n      if (!file.exists()) {\n        logError(\"file does not exists, input a new file name\")\n        exit()\n      }\n      headFileName = fileNameOption.getValue() + \".\" +\n        dataHeadTypeOption.getValue + \".head\"\n      val hfile: File = new File(headFileName)\n      if (hfile.exists()) {\n        // has a head file\n        hasHeadFile = true\n      }\n      spec = headParser.getSpecification(\n        if (hasHeadFile) headFileName else fileName, dataHeadTypeOption.getValue)\n      for (index <- 0 until spec.out(0).range()) {\n        logInfo(spec.out(0).asInstanceOf[NominalFeatureSpecification](index))\n      }\n\n      isInited = true\n    }\n  }\n\n  /**\n    * Obtains the specification of the examples in the stream.\n    *\n    * @return an ExampleSpecification of the features\n    */\n  override def getExampleSpecification(): ExampleSpecification = {\n    init()\n    spec\n  }\n\n  /**\n    * Get one Example from file\n    *\n    * @return an Example\n    */\n  def getExampleFromFile(): Example = {\n    var exp: Example = null\n    // start to read file from its beginning.\n    if (lines == null || !lines.hasNext) {\n      //get the whole file\n      lines = Source.fromFile(fileName).getLines()\n    }\n    // if reach the end of file, will go to the head again\n    if (!lines.hasNext) {\n      println(\"=============================\")\n      println(\"\\t\\tEnd of file!\")\n      println(\"=============================\")\n      // lines = Source.fromFile(fileName).getLines()\n      //if reach the end of file, return.\n      exp\n    }\n    var line = lines.next()\n    while (!hasHeadFile && (line == \"\" || line.startsWith(\" \") ||\n      line.startsWith(\"%\") || line.startsWith(\"@\"))) {\n      //logInfo(line)\n      line = lines.next()\n    }\n    if (!hasHeadFile) {\n      //logInfo(\"UUUU\" + line)\n      if (\"arff\".equalsIgnoreCase(dataHeadTypeOption.getValue())) {\n        exp = ExampleParser.fromArff(line, spec)\n      } else {\n        if (\"csv\".equalsIgnoreCase(dataHeadTypeOption.getValue())) {\n          //for the csv format, we assume the first is the classification\n          val index: Int = line.indexOf(\",\")\n          line = line.substring(0, index) + \" \" + line.substring(index + 1).trim()\n          exp = Example.parse(line, instanceOption.getValue, \"dense\")\n        }\n      }\n    } else {\n      exp = Example.parse(line, instanceOption.getValue, \"dense\")\n    }\n    exp\n  }\n\n  /**\n    * Obtains a stream of examples.\n    *\n    * @param ssc a Spark Streaming context\n    * @return a stream of Examples\n    */\n  override def getExamples(ssc: StreamingContext): DStream[Example] = {\n    init()\n    new InputDStream[Example](ssc) {\n      override def start(): Unit = {\n        logInfo(\"File reading gets started.\")\n      }\n\n      override def stop(): Unit = {\n        logInfo(\"Reading file stopped.\")\n      }\n\n      override def compute(validTime: Time): Option[RDD[Example]] = {\n        val examples: Array[Example] = Array.fill[Example](chunkSizeOption.getValue)(getExampleFromFile())\n        val examplesRDD = ssc.sparkContext.parallelize(examples)\n        // stop the stream when it gets over N instances.\n        counter = counter + 1\n        val limit = instanceLimitOption.getValue/ chunkSizeOption.getValue\n        if(counter > limit){\n          println(\"Over limit instances. STOP!\" )\n          logInfo(\"Over limit instances. STOP!\" )\n          ssc.stop(stopSparkContext = false, stopGracefully = false)\n        }\n        Some(examplesRDD)\n\n      }\n\n      override def slideDuration = {\n        new Duration(slideDurationOption.getValue)\n      }\n    }\n  }\n}",
			"settings":
			{
				"buffer_size": 6408,
				"line_ending": "Unix",
				"name": "/*"
			}
		},
		{
			"file": "scripts/result/hdt_1000_MC_elec_p_splitAll.res",
			"settings":
			{
				"buffer_size": 3666,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/result/hdt_1000_MC_elec_p_splitNTimes.res",
			"settings":
			{
				"buffer_size": 3355,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/result/hdt_1000_MC_complex300_p_splitNTimes.res",
			"settings":
			{
				"buffer_size": 949,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/result/log.log",
			"settings":
			{
				"buffer_size": 623677,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 127.0,
		"selected_items":
		[
			[
				"commit",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"scala",
				"Set Syntax: Scala"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/spark.sh",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/streams/PrintStreamWriter.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/accuracy.py",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_p_or.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_elec_p_or.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/splitThenMerge/hdt_1000_MC_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/splitThenMerge/hdt_1000_MC_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_p_splitNTimes.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_splitNTimes.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_complex_p_splitNTimes.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_elec_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_cov_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/accuracy.py",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_complex_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_complex_p_splitAll_2.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_kdd_p_splitAll.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/kdd99.arff",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_kdd_p_splitNTimes.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/randomtreesampledata",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_10000_NBA_splitMore.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_p_or.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_complex_p_4threads.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p_16threads_1.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p_8threads_1.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p_4threads.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_complex_p_2.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/replaceText.py",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_complex_p_1.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_elec_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_elec_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p_store_1.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/electNormNew.arff",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_elec.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_cov_p.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov_p_store.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_cov.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/randomtreedata.arff",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/covtypeNorm.arff",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_10000_NBA_splitMore_test.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_cov.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_MC_elec_p_splitNTimes.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4_t.log",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA_100000inst.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/runserver.sh",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_1000_NBA.accuracy",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_10000_NBA.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_10000_NBA_8threads.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_10000_NBA_2threads_1mil.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_100_NBA_small.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt_100_NBA.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl5_t_1000_NBA.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/streamDM (Spark Streaming).sublime-project",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/trees/Evaluator.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/trees/Utils.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/evaluation/ClusteringEvaluator.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl5_t_checkGaussianApproximation.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl5_t.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4_t.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/SGDLearner.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4Null_t.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4Null_t.log",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl4Null.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt12.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/checkHDT5.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/checkHDT5_accuracy.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/checkHDT7.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl2.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/majcl3.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt6.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt11.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/trees/HoeffdingTree.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt8.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt10.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hdt9.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/result/hd9.log",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/hdt2.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/bodyfat.arff",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/generateData.sh",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/core/DenseInstance.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/model/LinearModel.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/trees/SplitCriterion.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/hyperplanesampledata",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/data/hyperplanesampledata.arff.head",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/hdt2.log",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/02.Last Christmas - Wham [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/03.More Than I Can Say - Leo Sayer [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/04. Donna Donna - Claude Francois [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/05.Donna Donna - Yao Si Ting [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/06.Careless Whisper - Wham [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/07.Yesterday Once More - Carpenters [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/08.Because I Love You - Shakin_ Stevens [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/09.Until You - Shayne Ward [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/10.No Promises - Shayne Ward [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/11.One More Night - Maroon 5 [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/12.It_s Not Goodbye - Laura Pausini [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/13.Cry On My Shoulder - Super Stars [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/14.Hotel California - The Eagles [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/15.Sealed With A Kiss - Brian Hyland [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/16.Tonight I Celebrate My Love For You - Ya [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/17.Big Big World - Emilia [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/18.Love To Be Loved By You - Marc Terenzi [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/19.Take Me To Your Heart - Michael Learns T [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/Rolling In The Deep - Adele [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/Sealed With A Kiss - Yao Si Ting [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/20.Safe And Sound - Taylor Swift_ The Civil [FLAC Lossless].flac",
		"/Users/minhnguyen/Music/US-UK/Lossless/Lossless-selected/01. Lemon Tree - Fools Garden [FLAC Lossless].flac",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/evaluation/Evaluator.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/hdt.log",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/core/specification/FeatureSpecification.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/learn.sbt",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/java/com/github/javacliparser/Option.java",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/java/com/github/javacliparser/Options.java",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/tasks/ClusteringTrainEvaluate.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/classifiers/trees/FeatureSplit.scala",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/run/stage1.log",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/hdt.res",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/streams/StreamReader.scala",
		"/Users/minhnguyen/StreamingAlgo/replaceText.py",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/scripts/spark_cluster.sh",
		"/Users/minhnguyen/StreamingAlgo/StreamDM/streamDM/src/main/scala/org/apache/spark/streamdm/evaluation/BasicClassificationEvaluator.scala"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"arraySize",
			"19,10",
			"polevl",
			"991",
			"hoef",
			"Hoeffding",
			"HoeffdingTree",
			"accurac",
			"{467.0,3094.0}",
			"accuracy",
			"hoeffd",
			"stop",
			"count",
			"ERROR",
			"accuracy",
			"counter",
			"accu",
			"HoeffdingTreeModel: {7",
			"HoeffdingTreeModel: {",
			"counter",
			"accuracy",
			"Deactive",
			"best",
			"deactive",
			"Accuracy",
			"HoeffdingTreeModel: {",
			"accurac",
			"HoeffdingTreeModel: {",
			"LearningNode",
			"ActiveLear",
			"this",
			"tmodel",
			"HoeffdingTreeModel: {",
			"HoeffdingTree",
			"Counter",
			"this ",
			"instanceof",
			"blockAddOn",
			"addOnwe",
			"ClassDistr",
			"After merging",
			"After",
			"accuracy",
			"correct",
			"accuracy",
			"Cumulative",
			"numInstancesCorrect",
			"HoeffdingTreeModel: {",
			"HoeffdingTreeModel",
			"Total del",
			"delay",
			"HoeffdingTreeModel: {",
			"total",
			"ClassDistr:",
			"ClassDistr ",
			"classdistr ",
			"classdistr",
			"new model",
			"merge",
			"CheckActive",
			"checkActive",
			"println",
			"new model",
			"root.description",
			"description",
			"extends Node",
			"children",
			"splitNode",
			"filterto",
			"numBins",
			"splitTranspose",
			"classDis",
			"splitall",
			"binary",
			"bestSplit",
			"featureObservers",
			"train",
			"merge",
			"createLearningNode",
			"addOnWeight",
			"addOnweigh",
			"addOn",
			"addn",
			"pure",
			"suggestions",
			"Hoeffding",
			"suggestions",
			"best sug",
			"suggestion",
			"suggest",
			"suggestion",
			"blockNumExamples",
			"block",
			"learn",
			"arraytoString",
			"train",
			"split",
			"HoeffdingTreeModel",
			"Update",
			"tree",
			"tModel",
			"before",
			"root.descr",
			"description",
			"blockClassDis",
			"block",
			"Before",
			"counter",
			" =>",
			"toString",
			"accuracy7232",
			".931",
			".06",
			"blockClass",
			"blockCl",
			"learn",
			"blockClas",
			"learn",
			".learn",
			"learn.",
			"learn",
			"classD",
			"Majorit",
			"learningNodeOpt",
			"update",
			"SparkUI",
			"8080",
			"delay"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main/scala/org/apache/spark/streamdm/streamDMJob.scala",
					"settings":
					{
						"buffer_size": 1921,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main/scala/org/apache/spark/streamdm/evaluation/BasicClassificationEvaluator.scala",
					"settings":
					{
						"buffer_size": 8465,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/main/scala/org/apache/spark/streamdm/tasks/EvaluatePrequential.scala",
					"settings":
					{
						"buffer_size": 7098,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1686.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/HoeffdingTree.scala",
					"settings":
					{
						"buffer_size": 30867,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 541.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/FeatureClassObserver.scala",
					"settings":
					{
						"buffer_size": 18793,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/main/scala/org/apache/spark/streamdm/classifiers/trees/Node.scala",
					"settings":
					{
						"buffer_size": 22575,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2334.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/main/scala/org/apache/spark/streamdm/streams/FileReader.scala",
					"settings":
					{
						"buffer_size": 7202,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3125.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "scripts/run/run.sh",
					"settings":
					{
						"buffer_size": 5054,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 87.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "scripts/result/majcl4_t.log",
					"settings":
					{
						"buffer_size": 173102,
						"regions":
						{
						},
						"selection":
						[
							[
								26309,
								26309
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 37033.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "scripts/result/hdt_1000_MC_cov_splitAll.res",
					"settings":
					{
						"buffer_size": 2004,
						"regions":
						{
						},
						"selection":
						[
							[
								491,
								491
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1896.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"settings":
					{
						"buffer_size": 6408,
						"regions":
						{
						},
						"selection":
						[
							[
								6408,
								6408
							]
						],
						"settings":
						{
							"auto_name": "/*",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "scripts/result/hdt_1000_MC_elec_p_splitAll.res",
					"settings":
					{
						"buffer_size": 3666,
						"regions":
						{
						},
						"selection":
						[
							[
								2911,
								2911
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "scripts/result/hdt_1000_MC_elec_p_splitNTimes.res",
					"settings":
					{
						"buffer_size": 3355,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "scripts/result/hdt_1000_MC_complex300_p_splitNTimes.res",
					"settings":
					{
						"buffer_size": 949,
						"regions":
						{
						},
						"selection":
						[
							[
								470,
								470
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "scripts/result/log.log",
					"settings":
					{
						"buffer_size": 623677,
						"regions":
						{
						},
						"selection":
						[
							[
								857,
								857
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8778.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"t",
				"streamDM/scripts/run/toserver.sh"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 434.0,
	"status_bar_visible": true
}
